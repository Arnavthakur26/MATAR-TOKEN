"use strict";(self.webpackChunkmatar_landing_page=self.webpackChunkmatar_landing_page||[]).push([[3520],{16824:(t,n,i)=>{function s(t){return"string"===typeof t?Number.parseInt(t,"0x"===t.trim().substring(0,2)?16:10):"bigint"===typeof t?Number(t):t}i.d(n,{n:()=>s})},33520:(t,n,i)=>{i.d(n,{LocalWalletConnector:()=>u});var s=i(74948),e=i(26440),a=i(16824),r=i(10363),o=i(53576),h=i(75144),c=i(4736),d=i(62576);i(16432);class g extends c.Signer{constructor(t){super(),this.signer=t,(0,d.defineReadOnly)(this,"provider",t.provider)}async getAddress(){return await this.signer.getAddress()}async signMessage(t){return await this.signer.signMessage(t)}async signTransaction(t){return await this.signer.signTransaction(t)}connect(t){return new g(this.signer.connect(t))}_signTypedData(t,n,i){return this.signer._signTypedData(t,n,i)}async sendTransaction(t){if(!this.provider)throw new Error("Provider not found");const n={...await(0,o.g)(this.provider),...t};return await this.signer.sendTransaction(n)}}var l=new WeakMap,p=new WeakMap;class u extends r.C{constructor(t){super(),(0,e._)(this,"id","local_wallet"),(0,e._)(this,"name","Local Wallet"),(0,s._)(this,l,{writable:!0,value:void 0}),(0,s._)(this,p,{writable:!0,value:void 0}),(0,e._)(this,"shimDisconnectKey","localWallet.shimDisconnect"),(0,e._)(this,"onChainChanged",(t=>{const n=(0,a.n)(t),i=!this.options.chains.find((t=>t.chainId===n));this.emit("change",{chain:{id:n,unsupported:i}})})),this.options=t}async connect(t){t.chainId&&this.switchChain(t.chainId);const n=await this.getSigner();return await n.getAddress()}async disconnect(){(0,s.a)(this,l,void 0),(0,s.a)(this,p,void 0)}async getAddress(){const t=await this.getSigner();if(!t)throw new Error("No signer found");return await t.getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async getProvider(){return(0,s.b)(this,l)||(0,s.a)(this,l,(0,h.a_)(this.options.chain,{clientId:this.options.clientId,secretKey:this.options.secretKey})),(0,s.b)(this,l)}async getSigner(){if(!(0,s.b)(this,p)){const t=await this.getProvider();(0,s.a)(this,p,w(this.options.ethersWallet,t))}return(0,s.b)(this,p)}async switchChain(t){const n=this.options.chains.find((n=>n.chainId===t));if(!n)throw new Error("Chain not found for chainId ".concat(t,", please add it to the chains property when creating this wallet"));(0,s.a)(this,l,(0,h.a_)(n,{clientId:this.options.clientId,secretKey:this.options.secretKey})),(0,s.a)(this,p,w(this.options.ethersWallet,(0,s.b)(this,l))),this.onChainChanged(t)}async setupListeners(){}updateChains(t){this.options.chains=t}}function w(t,n){let i=t;return n&&(i=t.connect(n)),new g(i)}}}]);
//# sourceMappingURL=3520.05680c43.chunk.js.map